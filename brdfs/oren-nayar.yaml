# Using oren-nayar impl. from https://github.com/glslify/glsl-diffuse-oren-nayar
# Under MIT license:

#The MIT License (MIT)

#Copyright (c) 2014 Mikola Lysenko

#Permission is hereby granted, free of charge, to any person obtaining a copy
#of this software and associated documentation files (the "Software"), to deal
#in the Software without restriction, including without limitation the rights
#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#copies of the Software, and to permit persons to whom the Software is
#furnished to do so, subject to the following conditions:

#The above copyright notice and this permission notice shall be included in
#all copies or substantial portions of the Software.

#THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#THE SOFTWARE.

uniforms:
  rough:
    type: "float"
    min: 0
    max: 2
    default: 2
    symbol: σ
  albedo:
    type: "float"
    min: 0
    max: 1
    default: 1
    symbol: ρ
brdf: >
  #define M_PI 3.1415926535897932384626433832795

  //Formula from http://mimosa-pudica.net/improved-oren-nayar.html

  float sqr(float x){
    return x*x;
  }

  float sqr_sigma_frac(float sigma, float n){
    return sqr(sigma)/(sqr(sigma) + n);
  }

  vec3 BRDF(vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y){
    float sigma = rough;
    float rho = albedo;

    float s = dot(L,V) - dot(N,L)*dot(N,V);
    float t;
    if( s <= 0.0 ){
      t = 1.0;
    } else {
      t = max(dot(N,L),dot(N,V));
    }

    float A = (1.0/M_PI)*(1.0 - 0.5*sqr_sigma_frac(sigma,0.33)) + 0.17*rho*sqr_sigma_frac(sigma,0.13);
    float B = (1.0/M_PI)*(0.45*sqr_sigma_frac(sigma,0.09));
    return vec3(rho*(A + B*(s/t)));
  }
