# Ross-Li BRDF used by NASA MODIS project.
# Original source:
# [1] A. H. Strahler and J. P. Muller, “MODIS BRDF Albedo Product : Algorithm Theoretical Basis Document,” MODIS Prod. ID MOD43, vol. Version 5., no. April, pp. 1–53, 1999.
# https://modis.gsfc.nasa.gov/data/atbd/atbd_mod09.pdf

analytic

# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
float f_iso 0 0.6 0.2
float f_vol 0 0.4 0.09
float f_geo 0 0.04 0.15
::end parameters

# Then comes the shader. This should be GLSL code
# that defines a function called BRDF (although you can
# add whatever other functions you want too).

::begin shader

const float PI = 3.14159265358979323846;

float sqr( float x )
{
    return x*x;
}

float sec( float x )
{
  return 1.0/cos(x);
}

//WARNING: Using NASA's definition of phi, theta, and curly_theta.
// NOT the definition of phi and theta that we use elsewhere!
//
// curly_theta is known as \vartheta in LaTeX.
//(See https://ctan.org/tex-archive/info/symbols/comprehensive/ for
// \vartheta).
//
// Original Source: See Strahler, Muller 1999 [1] at top of this file.
//
// theta: solar zenith angle.
// curly_theta: view zenith angle
// phi: view-sun relative azimuth angle.

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
  float cos_theta = dot(L,N);
  float cos_curly_theta = dot(V,N);

  //L and V projected onto the tangent plane, spanned by
  //orthonormal basis vectors X, Y
  vec3 L_tangent = dot(L,X)*X + dot(L,Y)*Y;
  vec3 V_tangent = dot(V,X)*X + dot(V,Y)*Y;

  //FIXME: Degenerate case where L == N or V == N (within floating point epsilon)
  float cos_phi = dot(L_tangent, V_tangent) / (length(L_tangent) * length(V_tangent));

  float theta = acos(cos_theta);
  float curly_theta = acos(cos_curly_theta);
  float phi = acos(cos_phi);

  float h_over_b = 2.0; //Assumed to be 2 for MODIS processing, see [1]
  float b_over_r = 1.0; //Assumed to be 1 for MODIS processing, see [1]

  //Compute kGeo
  float theta_prime = atan(b_over_r*tan(theta));
  float curly_theta_prime = atan(b_over_r*tan(curly_theta));
  float cos_xi_prime = cos(theta_prime)*cos(curly_theta_prime)
    + sin(theta_prime)*sin(curly_theta_prime)*cos(phi);

  float D = sqrt(sqr(tan(theta_prime)) + sqr(tan(curly_theta_prime))
      - 2.0*tan(theta_prime)*tan(curly_theta_prime)*cos(phi));
  float cos_t = h_over_b * sqrt(sqr(D) +
      sqr(tan(theta_prime)*tan(curly_theta_prime)*sin(phi))) / (sec(theta_prime) + sec(curly_theta_prime));
  float t = acos(cos_t);
  float O = (1.0/PI) * (t - sin(t)*cos(t)) * (sec(theta_prime) + sec(curly_theta_prime));

  float K_geo = O - sec(theta_prime) - sec(curly_theta_prime)
    + 0.5*(1.0 + cos_xi_prime)*sec(theta_prime)*sec(curly_theta_prime);

  K_geo = max(0.0, K_geo);

  float K_vol = 0.0; //TODO: implement volume scattering term.

  return vec3(f_iso + f_vol*K_vol + f_geo*K_geo);
}

::end shader
