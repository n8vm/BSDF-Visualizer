analytic

# Walter07, w/ GGX

# variables go here...
# only floats supported right now.
# [type] [name] [min val] [max val] [default val]

::begin parameters
float Kd 0 1 0
float Ks 0 1 .1
float alphaG 0.001 1 .1
float ior 1.3 3 2
bool useFresnel 0
::end parameters

::begin shader

const float PI = 3.14159265358979323846;

float sqr(float x) { return x*x; }

float GGX(float NdotH, float alphaG)
{
    return alphaG*alphaG / (PI * sqr(NdotH*NdotH*(alphaG*alphaG-1.0) + 1.0));
}

float smithG_GGX(float Ndotv, float alphaG)
{
    return 2.0/(1.0 + sqrt(1.0 + alphaG*alphaG * (1.0-Ndotv*Ndotv)/(Ndotv*Ndotv)));
}

vec3 BRDF( vec3 L, vec3 V, vec3 N, vec3 X, vec3 Y )
{
    float NdotL = dot(N, L);
    float NdotV = dot(N, V);
    if (NdotL < 0.0 || NdotV < 0.0) return vec3(0.0);

    vec3 H = normalize(L+V);
    float NdotH = dot(N, H);
    float VdotH = dot(V, H);

    float D = GGX(NdotH, alphaG);
    float G = smithG_GGX(NdotL, alphaG) * smithG_GGX(NdotV, alphaG);

    // fresnel
    float c = VdotH;
    float g = sqrt(ior*ior + c*c - 1.0);
    float F = useFresnel ? 0.5 * pow(g-c,2.0) / pow(g+c,2.0) * (1.0 + pow(c*(g+c)-1.0,2.0) / pow(c*(g-c)+1.0,2.0)) : 1.0;

    float val = Kd/PI + Ks * D * G * F / (4.0 * NdotL * NdotV);
    return vec3(val);
}

::end shader
